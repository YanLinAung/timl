(in-ns 'timl#core)

(define pr-str (...) (f:join (map timl#pr-str ...)))
(define pr (...) (echo (apply pr-str ...)))
(define read-string (string) (timl#reader#read-string string))
(define eval (form) (timl#eval form))

(define constantly (x) (lambda (...) x))
(define partial (f ...)
  (let ((args ...))
    (lambda (...) (apply f (append args ...)))))
(define comp (f ...)
  (if-let (fns ...)
    (lambda (...) (f (apply (apply comp fns) ...)))
    f))

(define true (not nil))
(define false (not true))

(define 1+ (partial + 1))
(define 1- (n) (- n 1))
(define zero? (partial equal? 0))
(define nonzero? (comp not zero?))

(define reverse (xs) (f:reverse (f:copy xs)))
(define second (xs) (get xs 1 nil))
(define last (xs) (get xs -1 nil))
(define butlast (xs) (sublist xs 0 -2))
(define get-in (m ks) (reduce get m ks))

(define sorter (>)
  (lambda (x y)
    (if (> x y)
      1
      (if (> y x)
        -1
        0))))

(define sort (xs ...)
  (if ...
    (f:sort (f:copy xs) (sorter (first ...)) {})
    (f:sort (f:copy xs))))

(define reductions (f init xs)
  (cons init (if xs
    (reductions f (f init (first xs)) (rest xs)))))

(define-syntax capture (...)
  `(begin
     (try
       (: "redir => g:timl_core_captured")
       ,@...
       (finally (: "redir END")))
     (f:substitute g:timl_core_captured "^\n" "" "")))

(define-syntax include-guard (var)
  (let ((str (timl#munge (string var))))
   `(if (f:exists ,str)
     (: 'finish)
     (set! ,var 1))))

(define build-option-string (...)
  (sublist
    (loop ((s "")
           (x (first ...))
           (more (rest ...)))
      (if (nil? x)
        s
        (recur
          (if (symbol? x) (string s " " x) (string s (f:fnameescape (string x))))
          (first more) (rest more))
        )) 1 -1))

(define extract-option-names (...)
  (map (lambda (x) (f:matchstr (string x) "\\%(inv\\|no\\)\\=\\zs\\w\\+")) (filter symbol? ...)))

(define extract-option-restore (...)
  (if-let (options (apply extract-option-names ...))
    (string "setlocal " (f:join options "< ") "<")))

(define-syntax setlocal (...)
  `(: (string "setlocal " ,(apply build-option-string ...))))

(define-syntax setglobal (...)
  `(: (string "setlocal " ,(apply build-option-string ...))))
