(ns timl.repl)

(defn qf
  ([] (qf *e))
  ([e]
   (#*setqflist (get e "qflist"))
   (throw "timl#repl: exit copen")))

(defn breakpoint-fn [env]
  (let [str (#*input (format "%s=>> " (ns-name *ns*)))]
    (when (#*len str)
      (newline)
      (try
        (prn (#*timl#compiler#eval (read-string str) (ns-name *ns*) env))
        (catch "" e (set! *e e) (println (:exception e))))
      (recur env))))

(defmacro breakpoint []
  `(timl.repl/breakpoint-fn ~(list #*eval "locals")))

(defmacro breakadd []
  `(: "execute 'breakadd func '.(1+expand('<slnum>')).' '.matchstr(expand('<sfile>'), '.*\\.\\zs.*')"))
(defn breakme []
  (breakadd)
  (+ 1 (* 2 3)))

(defmacro doc [sym]
  (let [topic (if (special-symbol? sym)
                (str "timl-" sym)
                (resolve sym))]
    `(do
       (throw (str "timl#repl: exit help " (or ~topic (str '~sym))))
       (throw "timl#repl: exit"))))

(defn source [sym]
  (if-let [meta (get g:timl_functions (. sym -apply))]
    (throw (str "timl#repl: exit edit +" (get meta "line") " " (#*fnameescape (get meta "file"))))))
