(ns timl.repl)

(defn qf
  ([] (qf *e))
  ([e]
   (#*setqflist (get e "qflist"))
   (throw "timl#repl: exit copen")))

(defn breakpoint-fn [env]
  (let [str (#*input (format "%s=>> " (. *ns* -name)))]
    (when (#*len str)
      (newline)
      (try
        (prn (#*timl#compiler#eval (read-string str) (. *ns* -name) env))
        (catch "" e (set! *e e) (println (:exception e))))
      (recur env))))

(defmacro breakpoint []
  `(timl.repl/breakpoint-fn ~(list #*eval "locals[0]")))

(def special-forms
  '[if do let fn def :
     quote syntax-quote unquote unquote-splicing function
     throw try catch finally])

(defmacro doc [sym]
  (let [topic (if (<= 0 (#*index special-forms sym))
                (str "timl-" sym))]
    `(do
       (throw (str "timl#repl: exit help " (or ~topic (#*substitute (str ~sym) #"^\w\+\zs$" "(" ""))))
       (throw "timl#repl: exit"))))

(defn source [sym]
  (if-let [meta (get g:timl_functions (. sym -call))]
    (throw (str "timl#repl: exit edit +" (get meta "line") " " (#*fnameescape (get meta "file"))))))
