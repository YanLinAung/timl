(in-ns 'timl#core)

(defmacro capture [...]
  `(do
     (try
       (: "redir => g:timl_core_captured")
       ~@...
       (finally (: "redir END")))
     (f:substitute g:timl_core_captured "^\n" "" "")))

(defmacro include-guard [var]
  (let [string (timl#munge (str var))]
   `(if (f:exists ~string)
     (: "finish")
     (set! ~var 1))))

(defn build-option-string [args]
  (subvec
    (loop [s ""
           x (first args)
           more (rest args)]
      (if (nil? x)
        s
        (recur
          (if (symbol? x) (str s " " x) (str s (f:fnameescape (str x))))
          (first more) (rest more))
        )) 1 -1))

(defn extract-option-names [args]
  (map (fn [x] (f:matchstr (str x) "\\%(inv\\|no\\)\\=\\zs\\w\\+")) (filter symbol? args)))

(defn extract-option-restore [args]
  (if-let [options (extract-option-names args)]
    (str "setlocal " (f:join (map str options) "< ") "<")))

(defmacro setlocal [...]
  `(: (str "setlocal " ~(build-option-string args))))

(defmacro setglobal [...]
  `(: (str "setlocal " ~(build-option-string args))))
