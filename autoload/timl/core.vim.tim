(in-ns 'timl#core)

(defmacro capture [...]
  `(do
     (try
       (: "redir => g:timl_core_captured")
       ,@...
       (finally (: "redir END")))
     (f:substitute g:timl_core_captured "^\n" "" "")))

(defmacro include-guard [var]
  (let ((str (timl#munge (string var))))
   `(if (f:exists ,str)
     (: "finish")
     (set! ,var 1))))

(defn build-option-string [args]
  (sublist
    (loop ((s "")
           (x (first args))
           (more (rest args)))
      (if (nil? x)
        s
        (recur
          (if (symbol? x) (string s " " x) (string s (f:fnameescape (string x))))
          (first more) (rest more))
        )) 1 -1))

(defn extract-option-names [args]
  (map (fn [x] (f:matchstr (string x) "\\%(inv\\|no\\)\\=\\zs\\w\\+")) (filter symbol? args)))

(defn extract-option-restore [args]
  (if-let (options (extract-option-names args))
    (string "setlocal " (f:join (map string options) "< ") "<")))

(defmacro setlocal [...]
  `(: (string "setlocal " ,(build-option-string args))))

(defmacro setglobal [...]
  `(: (string "setlocal " ,(build-option-string args))))
